



DIMGUI_EXPORT ImGuiInputTextFlags DImGuiGetEventFlag (ImGuiInputTextCallbackData* s){ return s->EventFlag;}
DIMGUI_EXPORT ImGuiInputTextFlags DImGuiGetFlags (ImGuiInputTextCallbackData* s){ return s->Flags;}
DIMGUI_EXPORT ImWchar DImGuiGetEventChar (ImGuiInputTextCallbackData* s){ return s->EventChar;}
DIMGUI_EXPORT ImGuiKey DImGuiGetEventKey (ImGuiInputTextCallbackData* s){ return s->EventKey;}
DIMGUI_EXPORT char* DImGuiGetBuf (ImGuiInputTextCallbackData* s){ return s->Buf;}
DIMGUI_EXPORT int DImGuiGetBufTextLen (ImGuiInputTextCallbackData* s){ return s->BufTextLen;}
DIMGUI_EXPORT int DImGuiGetBufSize (ImGuiInputTextCallbackData* s){ return s->BufSize;}
DIMGUI_EXPORT bool DImGuiGetBufDirty (ImGuiInputTextCallbackData* s){ return s->BufDirty;}
DIMGUI_EXPORT int DImGuiGetCursorPos (ImGuiInputTextCallbackData* s){ return s->CursorPos;}
DIMGUI_EXPORT int DImGuiGetSelectionStart (ImGuiInputTextCallbackData* s){ return s->SelectionStart;}
DIMGUI_EXPORT int DImGuiGetSelectionEnd (ImGuiInputTextCallbackData* s){ return s->SelectionEnd;}




DIMGUI_EXPORT void DImGuiSetEventFlag (ImGuiInputTextCallbackData* s, ImGuiInputTextFlags value){ s->EventFlag=value;}
DIMGUI_EXPORT void DImGuiSetFlags (ImGuiInputTextCallbackData* s, ImGuiInputTextFlags value){ s->Flags=value;}
DIMGUI_EXPORT void DImGuiSetEventChar (ImGuiInputTextCallbackData* s, ImWchar value){ s->EventChar=value;}
DIMGUI_EXPORT void DImGuiSetEventKey (ImGuiInputTextCallbackData* s, ImGuiKey value){ s->EventKey=value;}
DIMGUI_EXPORT void DImGuiSetBuf (ImGuiInputTextCallbackData* s, char* value){ s->Buf=value;}
DIMGUI_EXPORT void DImGuiSetBufTextLen (ImGuiInputTextCallbackData* s, int value){ s->BufTextLen=value;}
DIMGUI_EXPORT void DImGuiSetBufSize (ImGuiInputTextCallbackData* s, int value){ s->BufSize=value;}
DIMGUI_EXPORT void DImGuiSetBufDirty (ImGuiInputTextCallbackData* s, bool value){ s->BufDirty=value;}
DIMGUI_EXPORT void DImGuiSetCursorPos (ImGuiInputTextCallbackData* s, int value){ s->CursorPos=value;}
DIMGUI_EXPORT void DImGuiSetSelectionStart (ImGuiInputTextCallbackData* s, int value){ s->SelectionStart=value;}
DIMGUI_EXPORT void DImGuiSetSelectionEnd (ImGuiInputTextCallbackData* s, int value){ s->SelectionEnd=value;}




DImGuiGetEventFlag:{
    parameters: ["pointer"],
    result: "i32",
} as const satisfies Deno.ForeignFunction,
DImGuiSetEventFlag:{
    parameters: ["pointer","i32"],
    result: "void",
} as const satisfies Deno.ForeignFunction,
DImGuiGetFlags:{
    parameters: ["pointer"],
    result: "i32",
} as const satisfies Deno.ForeignFunction,
DImGuiSetFlags:{
    parameters: ["pointer","i32"],
    result: "void",
} as const satisfies Deno.ForeignFunction,
DImGuiGetEventChar:{
    parameters: ["pointer"],
    result: "u16",
} as const satisfies Deno.ForeignFunction,
DImGuiSetEventChar:{
    parameters: ["pointer","u16"],
    result: "void",
} as const satisfies Deno.ForeignFunction,
DImGuiGetEventKey:{
    parameters: ["pointer"],
    result: "i32",
} as const satisfies Deno.ForeignFunction,
DImGuiSetEventKey:{
    parameters: ["pointer","i32"],
    result: "void",
} as const satisfies Deno.ForeignFunction,
DImGuiGetBuf:{
    parameters: ["pointer"],
    result: "buffer",
} as const satisfies Deno.ForeignFunction,
DImGuiSetBuf:{
    parameters: ["pointer","buffer"],
    result: "void",
} as const satisfies Deno.ForeignFunction,
DImGuiGetBufTextLen:{
    parameters: ["pointer"],
    result: "i32",
} as const satisfies Deno.ForeignFunction,
DImGuiSetBufTextLen:{
    parameters: ["pointer","i32"],
    result: "void",
} as const satisfies Deno.ForeignFunction,
DImGuiGetBufSize:{
    parameters: ["pointer"],
    result: "i32",
} as const satisfies Deno.ForeignFunction,
DImGuiSetBufSize:{
    parameters: ["pointer","i32"],
    result: "void",
} as const satisfies Deno.ForeignFunction,
DImGuiGetBufDirty:{
    parameters: ["pointer"],
    result: "bool",
} as const satisfies Deno.ForeignFunction,
DImGuiSetBufDirty:{
    parameters: ["pointer","bool"],
    result: "void",
} as const satisfies Deno.ForeignFunction,
DImGuiGetCursorPos:{
    parameters: ["pointer"],
    result: "i32",
} as const satisfies Deno.ForeignFunction,
DImGuiSetCursorPos:{
    parameters: ["pointer","i32"],
    result: "void",
} as const satisfies Deno.ForeignFunction,
DImGuiGetSelectionStart:{
    parameters: ["pointer"],
    result: "i32",
} as const satisfies Deno.ForeignFunction,
DImGuiSetSelectionStart:{
    parameters: ["pointer","i32"],
    result: "void",
} as const satisfies Deno.ForeignFunction,
DImGuiGetSelectionEnd:{
    parameters: ["pointer"],
    result: "i32",
} as const satisfies Deno.ForeignFunction,
DImGuiSetSelectionEnd:{
    parameters: ["pointer","i32"],
    result: "void",
} as const satisfies Deno.ForeignFunction,




/*
 *  One ImGuiInputTextFlags_Callback*    // Read-only
*/
get EventFlag(): ImGuiInputTextFlags {
  return imgui.DImGuiGetEventFlag(this.#self);
}
set EventFlag(value: ImGuiInputTextFlags) {
  imgui.DImGuiSetEventFlag(this.#self, value);
}
/*
 *  What user passed to InputText()      // Read-only
*/
get Flags(): ImGuiInputTextFlags {
  return imgui.DImGuiGetFlags(this.#self);
}
set Flags(value: ImGuiInputTextFlags) {
  imgui.DImGuiSetFlags(this.#self, value);
}
/*
 *  Character input                      // Read-write   // [CharFilter] Replace character with another one, or set to zero to drop. return 1 is equivalent to setting EventChar=0;
*/
get EventChar(): ImWchar {
  return imgui.DImGuiGetEventChar(this.#self);
}
set EventChar(value: ImWchar) {
  imgui.DImGuiSetEventChar(this.#self, value);
}
/*
 *  Key pressed (Up/Down/TAB)            // Read-only    // [Completion,History]
*/
get EventKey(): ImGuiKey {
  return imgui.DImGuiGetEventKey(this.#self);
}
set EventKey(value: ImGuiKey) {
  imgui.DImGuiSetEventKey(this.#self, value);
}
/*
 *  Text buffer                          // Read-write   // [Resize] Can replace pointer / [Completion,History,Always] Only write to pointed data, don't replace the actual pointer!
*/
get Buf(): string {
  return imgui.DImGuiGetBuf(this.#self);
}
set Buf(value: string) {
  imgui.DImGuiSetBuf(this.#self, value);
}
/*
 *  Text length (in bytes)               // Read-write   // [Resize,Completion,History,Always] Exclude zero-terminator storage. In C land: == strlen(some_text), in C++ land: string.length()
*/
get BufTextLen(): number {
  return imgui.DImGuiGetBufTextLen(this.#self);
}
set BufTextLen(value: number) {
  imgui.DImGuiSetBufTextLen(this.#self, value);
}
/*
 *  Buffer size (in bytes) = capacity+1  // Read-only    // [Resize,Completion,History,Always] Include zero-terminator storage. In C land == ARRAYSIZE(my_char_array), in C++ land: string.capacity()+1
*/
get BufSize(): number {
  return imgui.DImGuiGetBufSize(this.#self);
}
set BufSize(value: number) {
  imgui.DImGuiSetBufSize(this.#self, value);
}
/*
 *  Set if you modify Buf/BufTextLen!    // Write        // [Completion,History,Always]
*/
get BufDirty(): boolean {
  return imgui.DImGuiGetBufDirty(this.#self);
}
set BufDirty(value: boolean) {
  imgui.DImGuiSetBufDirty(this.#self, value);
}
/*
 *                                       // Read-write   // [Completion,History,Always]
*/
get CursorPos(): number {
  return imgui.DImGuiGetCursorPos(this.#self);
}
set CursorPos(value: number) {
  imgui.DImGuiSetCursorPos(this.#self, value);
}
/*
 *                                       // Read-write   // [Completion,History,Always] == to SelectionEnd when no selection)
*/
get SelectionStart(): number {
  return imgui.DImGuiGetSelectionStart(this.#self);
}
set SelectionStart(value: number) {
  imgui.DImGuiSetSelectionStart(this.#self, value);
}
/*
 *                                       // Read-write   // [Completion,History,Always]
*/
get SelectionEnd(): number {
  return imgui.DImGuiGetSelectionEnd(this.#self);
}
set SelectionEnd(value: number) {
  imgui.DImGuiSetSelectionEnd(this.#self, value);
}